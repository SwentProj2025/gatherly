rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules

    // --- PROFILES ---
        match /profiles/{userId} {
          // Only the authenticated user can read/write their own profile
          //allow read, write: if request.auth != null && request.auth.uid == userId;
          allow read: if request.auth != null;
          allow write: if request.auth != null && request.auth.uid == userId;
        }

    // --- USERNAMES ---
        match /usernames/{username} {
          // Authenticated users can read/write usernames (needed for registration)
          allow read, write: if request.auth != null;
        }

    // --- TODOS ---
        // Each user's todos are stored under /users/{userId}/todos/{todoId}
        match /users/{userId}/todos/{todoId} {
          // Allow reading/writing only if the authenticated user matches the userId.
          allow read, write: if request.auth != null && request.auth.uid == userId;

          // Optional stronger check on creation:
          // The ToDo being created must also have ownerId == request.auth.uid.
          allow create: if request.auth != null
                        && request.auth.uid == userId
                        && request.resource.data.ownerId == request.auth.uid;
        }

    // --- EVENTS ---
        match /events/{eventId} {
          // Anyone authenticated can read events
          allow read: if request.auth != null;
          allow get: if request.auth != null;
          allow list: if request.auth != null;

          // Only authenticated users can create events,
          // and the event's creatorId must match their UID
          allow create: if request.auth != null
                        && request.resource.data.creatorId == request.auth.uid;

          // Only the creator can delete their own event
          allow delete: if request.auth != null
                        && resource.data.creatorId == request.auth.uid;

          // Only the creator can update other event fields
          // Anyone can update participants
           allow update: if request.auth != null &&
           (resource.data.creatorId == request.auth.uid ||
                (request.writeFields.hasOnly(['participants']))
            );
        }
    // --- GROUPS ---
        match /groups/{groupId} {
                // Anyone authenticated can read groups
                allow read: if request.auth != null;

                // Only authenticated users can create groups,
                // and the group's creatorId must match their UID
                allow create: if request.auth != null
                              && request.resource.data.creatorId == request.auth.uid;

                // Only admins can delete the group
                allow delete: if request.auth != null
                               && request.auth.uid in resource.data.adminIds;

                // Allow updates if:
                // - User is an admin (can do anything)
                // - OR user is removing themselves from memberIds/adminIds
                allow update: if request.auth != null
                               && (
                                 request.auth.uid in resource.data.adminIds
                                 || (
                                   request.auth.uid in resource.data.memberIds
                                   && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'adminIds'])
                                   && !(request.auth.uid in request.resource.data.memberIds)
                                 )
                               );
        }

        // --- FOCUS SESSIONS ---
        match /focusSessions/{focusSessionId} {

          // Anyone authenticated can read focus sessions (since it's visible publicly in anyone's profile)
            allow read: if request.auth != null;
            allow get: if request.auth != null;
            allow list: if request.auth != null;

          // Only authenticated users can create if their ID matches creatorId
          allow create: if request.auth != null
            && request.resource.data.creatorId == request.auth.uid;

          // Only the creator of the focus session can update it
          allow update: if request.auth != null
            && resource.data.creatorId == request.auth.uid;

          // Only the creator of the focus session can delete it
          allow delete: if request.auth != null
            && resource.data.creatorId == request.auth.uid;
        }

  }
}