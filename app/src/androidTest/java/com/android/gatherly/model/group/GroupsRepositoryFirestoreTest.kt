package com.android.gatherly.model.group

import com.android.gatherly.utils.FirestoreGroupsGatherlyTest
import java.util.NoSuchElementException
import kotlinx.coroutines.test.runTest
import org.junit.Assert.*
import org.junit.Test

// This file contains code generated by an LLM (GitHub Copilot, Claude.ai).

/**
 * Test suite for [GroupsRepositoryFirestore].
 *
 * Tests cover CRUD operations, security checks for admin-only actions, member/admin management, and
 * edge cases like preventing removal of the last admin.
 */
class GroupsRepositoryFirestoreTest : FirestoreGroupsGatherlyTest() {

  /** Verifies that multiple groups can be added and retrieved with getAllGroups(). */
  @Test
  fun add_and_getAll_works() = runTest {
    repository.addGroup(group1)
    repository.addGroup(group2)

    val events = repository.getAllGroups()
    assertEquals(2, events.size)
    assertTrue(events.any { it.name == "Dream Team" })
    assertTrue(events.any { it.name == "Study Buddies" })
  }

  /**
   * Verifies that getUserGroups() only returns groups where the current user is a member, filtering
   * out groups created by other users.
   */
  @Test
  fun getUserGroups_returns_only_user_groups() = runTest {
    // Add group as user1
    repository.addGroup(group1)

    // Sign in as user2 and add their group
    signInWithToken(user2Token)
    repository.addGroup(group2)

    // Sign in as user3 and add their group
    signInWithToken(user3Token)
    repository.addGroup(group3)

    // Sign back to user2 to test
    signInWithToken(user2Token)
    val user2Groups = repository.getUserGroups()
    assertEquals(1, user2Groups.size)
    assertEquals(group2.gid, user2Groups.first().gid)
  }

  @Test
  fun getGroup_returns_exact_group() = runTest {
    repository.addGroup(group1)

    val retrieved = repository.getGroup(group1.gid)
    val expected =
        group1.copy(creatorId = user1Id, memberIds = listOf(user1Id), adminIds = listOf(user1Id))
    assertEquals(expected.gid, retrieved.gid)
    assertEquals(expected.creatorId, retrieved.creatorId)
    assertEquals(expected.name, retrieved.name)
    assertEquals(expected.description, retrieved.description)
    assertEquals(expected.memberIds, retrieved.memberIds)
    assertEquals(expected.adminIds, retrieved.adminIds)
  }

  @Test
  fun getGroup_throws_when_not_found() = runTest {
    try {
      repository.getGroup("non_existing_id")
      fail("Expected NoSuchElementException to be thrown")
    } catch (e: NoSuchElementException) {
      // Expected
    }
  }

  @Test
  fun addGroup_with_initial_members_stores_correctly() = runTest {
    val testedGroup = group1.copy(memberIds = listOf(user2Id, user3Id), adminIds = listOf(user2Id))

    repository.addGroup(testedGroup)
    val retrieved = repository.getGroup(testedGroup.gid)
    assertEquals(testedGroup.gid, retrieved.gid)
    assertEquals(user1Id, retrieved.creatorId) // Creator is current user
    assertEquals(testedGroup.name, retrieved.name)
    assertEquals(testedGroup.description, retrieved.description)
    // Creator gets added automatically
    assertTrue(retrieved.memberIds.contains(user1Id))
    assertTrue(retrieved.memberIds.containsAll(listOf(user2Id, user3Id)))
    assertTrue(retrieved.adminIds.contains(user1Id))
    assertTrue(retrieved.adminIds.contains(user2Id))
  }

  /**
   * Verifies that when a group is created with empty memberIds and adminIds, the creator is
   * automatically added to both lists.
   */
  @Test
  fun addGroup_automatically_adds_creator_as_member_and_admin() = runTest {
    signInWithToken(user4Token)
    val testedGroup = group2.copy(memberIds = emptyList(), adminIds = emptyList())
    repository.addGroup(testedGroup)
    val retrieved = repository.getGroup(testedGroup.gid)
    assertEquals(testedGroup.gid, retrieved.gid)
    assertEquals(user4Id, retrieved.creatorId)
    assertEquals(testedGroup.name, retrieved.name)
    assertEquals(testedGroup.description, retrieved.description)
    assertTrue(retrieved.memberIds.contains(user4Id))
    assertTrue(retrieved.adminIds.contains(user4Id))
  }

  @Test
  fun addGroup_with_null_description_stores_correctly() = runTest {
    val testedGroup = group3.copy(description = null)
    repository.addGroup(testedGroup)
    val retrieved = repository.getGroup(testedGroup.gid)
    assertEquals(testedGroup.gid, retrieved.gid)
    assertEquals(user1Id, retrieved.creatorId)
    assertEquals(testedGroup.name, retrieved.name)
    assertNull(retrieved.description)
    assertTrue(retrieved.memberIds.contains(user1Id))
    assertTrue(retrieved.adminIds.contains(user1Id))
  }

  @Test
  fun editGroup_updates_existing_group() = runTest {
    repository.addGroup(group1)

    val updatedGroup = group1.copy(name = "Updated Team", description = "Updated description")
    repository.editGroup(group1.gid, updatedGroup)

    val retrieved = repository.getGroup(group1.gid)
    assertEquals(updatedGroup.gid, retrieved.gid)
    assertEquals(user1Id, retrieved.creatorId)
    assertEquals("Updated Team", retrieved.name)
    assertEquals("Updated description", retrieved.description)
  }

  @Test
  fun editGroup_throws_security_exception_when_not_admin() = runTest {
    val testedGroup = group3.copy(memberIds = listOf(user2Id, user3Id), adminIds = listOf(user2Id))
    repository.addGroup(testedGroup)

    // Sign in as user4 (not an admin)
    signInWithToken(user4Token)
    try {
      val updatedGroup = group1.copy(name = "Malicious Update")
      repository.editGroup(testedGroup.gid, updatedGroup)
      fail("Expected SecurityException to be thrown")
    } catch (e: SecurityException) {
      // Expected
    }
  }

  @Test
  fun deleteGroup_removes_it() = runTest {
    repository.addGroup(group1)
    repository.addGroup(group2)
    assertEquals(2, repository.getAllGroups().size)
    repository.deleteGroup(group1.gid)
    val groups = repository.getAllGroups()
    assertEquals(1, groups.size)
    assertEquals(group2.gid, groups.first().gid)
  }

  @Test
  fun deleteGroup_throws_security_exception_when_not_admin() = runTest {
    val testedGroup = group3.copy(memberIds = listOf(user2Id, user3Id), adminIds = listOf(user2Id))
    repository.addGroup(testedGroup)

    // Sign in as user4 (not an admin)
    signInWithToken(user4Token)
    try {
      repository.deleteGroup(testedGroup.gid)
      fail("Expected SecurityException to be thrown")
    } catch (e: SecurityException) {
      // Expected
    }
  }

  @Test
  fun addMember_adds_user_to_memberIds() = runTest {
    val testedGroup = group2.copy(memberIds = listOf(user1Id, user3Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)
    repository.addMember(testedGroup.gid, user2Id)
    val retrieved = repository.getGroup(testedGroup.gid)
    assertEquals(3, retrieved.memberIds.size)
    assertTrue(retrieved.memberIds.containsAll(listOf(user1Id, user2Id, user3Id)))
  }

  @Test
  fun addMember_multiple_users() = runTest {
    val testedGroup = group2.copy(memberIds = listOf(user1Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)
    repository.addMember(testedGroup.gid, user2Id)
    repository.addMember(testedGroup.gid, user3Id)
    val retrieved = repository.getGroup(testedGroup.gid)
    assertEquals(3, retrieved.memberIds.size)
    assertTrue(retrieved.memberIds.containsAll(listOf(user1Id, user2Id, user3Id)))
  }

  /**
   * Verifies that only admins can add members to a group. Non-admin members attempting to add users
   * should receive a SecurityException.
   */
  @Test
  fun addMember_throws_security_exception_when_not_admin() = runTest {
    val testedGroup = group2.copy(memberIds = listOf(user1Id, user2Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)

    // Sign in as user2 (member but not admin)
    signInWithToken(user2Token)
    try {
      repository.addMember(testedGroup.gid, user3Id)
      fail("Expected SecurityException to be thrown")
    } catch (e: SecurityException) {
      // Expected
    }
  }

  @Test
  fun removeMember_removes_user_from_memberIds() = runTest {
    val testedGroup = group2.copy(memberIds = listOf(user1Id, user2Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)
    repository.removeMember(testedGroup.gid, user2Id)
    val retrieved = repository.getGroup(testedGroup.gid)
    assertEquals(1, retrieved.memberIds.size)
    assertTrue(retrieved.memberIds.contains(user1Id))
  }

  /**
   * Verifies that the last admin cannot be removed from the group. This prevents groups from
   * becoming orphaned without any admin.
   */
  @Test
  fun removeMember_prevents_removing_last_admin() = runTest {
    val testedGroup = group2.copy(memberIds = listOf(user1Id, user2Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)
    try {
      repository.removeMember(testedGroup.gid, user1Id)
      fail("Expected IllegalStateException to be thrown")
    } catch (e: IllegalStateException) {
      // Expected
    }
  }

  /**
   * Verifies that any member can remove themselves from a group (leave the group), even if they are
   * not an admin. This implements the "members can leave at any time" requirement.
   */
  @Test
  fun removeMember_allows_self_removal() = runTest {
    val testedGroup =
        group2.copy(memberIds = listOf(user1Id, user2Id, user3Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)

    // Sign in as user2 (member but not admin) and remove self
    signInWithToken(user2Token)
    repository.removeMember(testedGroup.gid, user2Id)

    val retrieved = repository.getGroup(testedGroup.gid)
    assertEquals(2, retrieved.memberIds.size)
    assertFalse(retrieved.memberIds.contains(user2Id))
    assertTrue(retrieved.memberIds.containsAll(listOf(user1Id, user3Id)))
  }

  /**
   * Verifies that non-admin members cannot remove other members from the group. Only admins (or the
   * member themselves) can remove members.
   */
  @Test
  fun removeMember_throws_security_exception_when_not_admin() = runTest {
    val testedGroup =
        group2.copy(memberIds = listOf(user1Id, user2Id, user3Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)

    // Sign in as user2 (member but not admin) trying to remove user3
    signInWithToken(user2Token)
    try {
      repository.removeMember(testedGroup.gid, user3Id)
      fail("Expected SecurityException to be thrown")
    } catch (e: SecurityException) {
      // Expected
    }
  }

  @Test
  fun addAdmin_adds_user_to_adminIds() = runTest {
    val testedGroup = group2.copy(memberIds = listOf(user1Id, user2Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)
    repository.addAdmin(testedGroup.gid, user2Id)
    val retrieved = repository.getGroup(testedGroup.gid)
    assertEquals(2, retrieved.adminIds.size)
    assertTrue(retrieved.adminIds.containsAll(listOf(user1Id, user2Id)))
  }

  /**
   * Verifies that a user must be a member of the group before they can be promoted to admin.
   * Attempting to promote a non-member should throw an IllegalStateException.
   */
  @Test
  fun addAdmin_requires_candidate_user_to_be_member_first() = runTest {
    val testedGroup = group2.copy(memberIds = listOf(user1Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)
    try {
      repository.addAdmin(testedGroup.gid, user2Id)
      fail("Expected IllegalStateException to be thrown")
    } catch (e: IllegalStateException) {
      // Expected
    }
  }

  /**
   * Verifies that only admins can promote members to admin status. Non-admin members attempting to
   * promote others should receive a SecurityException.
   */
  @Test
  fun addAdmin_throws_security_exception_when_not_admin() = runTest {
    val testedGroup =
        group2.copy(memberIds = listOf(user1Id, user2Id, user3Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)

    // Sign in as user2 (member but not admin)
    signInWithToken(user2Token)
    try {
      repository.addAdmin(testedGroup.gid, user3Id)
      fail("Expected SecurityException to be thrown")
    } catch (e: SecurityException) {
      // Expected
    }
  }

  @Test
  fun removeAdmin_removes_user_from_adminIds() = runTest {
    val testedGroup =
        group2.copy(memberIds = listOf(user1Id, user2Id), adminIds = listOf(user1Id, user2Id))
    repository.addGroup(testedGroup)
    repository.removeAdmin(testedGroup.gid, user2Id)
    val retrieved = repository.getGroup(testedGroup.gid)
    assertEquals(1, retrieved.adminIds.size)
    assertTrue(retrieved.adminIds.contains(user1Id))
  }

  /**
   * Verifies that the last admin cannot be demoted from admin status. This ensures every group
   * always has at least one admin.
   */
  @Test
  fun removeAdmin_prevents_removing_last_admin() = runTest {
    val testedGroup = group2.copy(memberIds = listOf(user1Id, user2Id), adminIds = listOf(user1Id))
    repository.addGroup(testedGroup)
    try {
      repository.removeAdmin(testedGroup.gid, user1Id)
      fail("Expected IllegalStateException to be thrown")
    } catch (e: IllegalStateException) {
      // Expected
    }
  }

  /**
   * Verifies that only admins can demote other admins. Non-admin members attempting to demote
   * admins should receive a SecurityException.
   */
  @Test
  fun removeAdmin_throws_security_exception_when_not_admin() = runTest {
    val testedGroup =
        group2.copy(
            memberIds = listOf(user1Id, user2Id, user3Id), adminIds = listOf(user1Id, user2Id))
    repository.addGroup(testedGroup)

    // Sign in as user3 (member but not admin)
    signInWithToken(user3Token)
    try {
      repository.removeAdmin(testedGroup.gid, user2Id)
      fail("Expected SecurityException to be thrown")
    } catch (e: SecurityException) {
      // Expected
    }
  }

  @Test
  fun getNewId_works_and_returns_unique_values() {
    val id1 = repository.getNewId()
    val id2 = repository.getNewId()
    assertNotEquals(id1, id2)
    assertTrue(id1.isNotEmpty())
    assertTrue(id2.isNotEmpty())
  }
}
