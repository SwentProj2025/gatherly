package com.android.gatherly.utils

import android.util.Log
import com.android.gatherly.model.event.Event
import com.android.gatherly.model.event.EventStatus
import com.android.gatherly.model.event.EventsRepository
import com.android.gatherly.model.event.EventsRepositoryFirestore
import com.google.firebase.Timestamp
import com.google.firebase.auth.GoogleAuthProvider
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.test.runTest
import org.junit.After
import org.junit.Before

// This file contains code generated by an LLM (Claude.ai).

/**
 * Base class for Firestore-based Events tests using the Firebase Emulator Suite.
 *
 * Before running, start the emulators: firebase emulators:start
 */
open class FirestoreEventsGatherlyTest {

  protected lateinit var repository: EventsRepository

  // Create fake tokens for different users
  protected val user1Token = FakeJwtGenerator.createFakeGoogleIdToken("Alice", "alice@test.com")
  protected val user2Token = FakeJwtGenerator.createFakeGoogleIdToken("Bob", "bob@test.com")

  protected lateinit var user1Id: String
  protected lateinit var user2Id: String

  // Sample events used in tests
  protected val event1 =
      Event(
          id = "1",
          title = "Team Meeting",
          description = "Weekly sync",
          creatorName = "Alice",
          location = null,
          date = Timestamp.now(),
          startTime = Timestamp.now(),
          endTime = Timestamp.now(),
          creatorId = "", // Will be set dynamically in tests
          participants = emptyList(),
          status = EventStatus.UPCOMING)

  protected val event2 =
      event1.copy(id = "2", title = "Conference", description = "Tech conference")
  protected val event3 = event1.copy(id = "3", title = "Workshop", description = "Kotlin workshop")

  @Before
  open fun setUp() = runTest {
    if (!FirebaseEmulator.isRunning) {
      error("Firebase emulator must be running! Use: firebase emulators:start")
    }

    // Seed users in emulator
    FirebaseEmulator.createGoogleUser(user1Token)
    FirebaseEmulator.createGoogleUser(user2Token)

    // Sign in as user1 by default
    signInWithToken(user1Token)
    user1Id = FirebaseEmulator.auth.currentUser!!.uid

    // Store user2Id without signing in as them
    val currentUser = FirebaseEmulator.auth.currentUser
    signInWithToken(user2Token)
    user2Id = FirebaseEmulator.auth.currentUser!!.uid
    // Switch back to user1
    signInWithToken(user1Token)

    repository = EventsRepositoryFirestore(FirebaseEmulator.firestore)
    clearAllEvents()
  }

  @After
  open fun tearDown() = runTest {
    clearAllEvents()
    FirebaseEmulator.clearAuthEmulator()
    FirebaseEmulator.clearFirestoreEmulator()
  }

  /**
   * Sign in with the given fake JWT token.
   *
   * @param token The fake JWT token created with FakeJwtGenerator
   */
  protected suspend fun signInWithToken(token: String) {
    val credential = GoogleAuthProvider.getCredential(token, null)
    FirebaseEmulator.auth.signInWithCredential(credential).await()
  }

  /** Deletes all events in the emulator Firestore (global collection) */
  protected suspend fun clearAllEvents() {
    val events = FirebaseEmulator.firestore.collection("events").get().await()

    val batch = FirebaseEmulator.firestore.batch()
    events.documents.forEach { batch.delete(it.reference) }
    batch.commit().await()

    Log.d("FirestoreEventsGatherlyTest", "Cleared ${events.size()} events")
  }

  /** Returns the current count of events in the system. */
  protected suspend fun getEventsCount(): Int {
    val snap = FirebaseEmulator.firestore.collection("events").get().await()
    return snap.size()
  }
}
