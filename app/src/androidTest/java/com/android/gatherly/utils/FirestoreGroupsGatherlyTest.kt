package com.android.gatherly.utils

import android.util.Log
import com.android.gatherly.model.group.Group
import com.android.gatherly.model.group.GroupsRepository
import com.android.gatherly.model.group.GroupsRepositoryFirestore
import com.google.firebase.auth.GoogleAuthProvider
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.test.runTest
import org.junit.After
import org.junit.Before

// This file contains code generated by an LLM (Claude.ai).

/**
 * Base class for Firestore-based Groups tests using the Firebase Emulator Suite.
 *
 * Before running, start the emulators: firebase emulators:start
 */
open class FirestoreGroupsGatherlyTest {

  /**
   * The GroupsRepository instance backed by the Firestore emulator. Initialized during setUp() and
   * used for testing repository operations.
   */
  protected lateinit var repository: GroupsRepository

  // Create fake tokens for different users
  protected val user1Token = FakeJwtGenerator.createFakeGoogleIdToken("Alice", "alice@test.com")
  protected val user2Token = FakeJwtGenerator.createFakeGoogleIdToken("Bob", "bob@test.com")
  protected val user3Token = FakeJwtGenerator.createFakeGoogleIdToken("Geoff", "geoff@test.com")
  protected val user4Token = FakeJwtGenerator.createFakeGoogleIdToken("Donna", "donna@test.com")

  /**
   * The unique identifiers for the test users in the Firebase Auth emulator. Set dynamically during
   * setUp() after authentication.
   */
  protected lateinit var user1Id: String
  protected lateinit var user2Id: String
  protected lateinit var user3Id: String
  protected lateinit var user4Id: String

  /** Sample group used as a template in tests. Created by Alice. */
  protected val group1 =
      Group(
          gid = "1",
          creatorId = "", // Will be set dynamically in tests
          name = "Dream Team",
          description = "Weekly project discussions",
          memberIds = emptyList(),
          adminIds = emptyList())

  /** Sample group variation - study group */
  protected val group2 =
      group1.copy(gid = "2", name = "Study Buddies", description = "Group for study sessions")

  /** Sample group variation - workshop attendees */
  protected val group3 =
      group1.copy(
          gid = "3", name = "Workshop Attendees", description = "Attendees of the Kotlin workshop")

  /**
   * Sets up the test environment before each test.
   *
   * This method performs the following steps:
   * 1. Verifies the Firebase emulator is running
   * 2. Clears all existing authentication and Firestore data
   * 3. Seeds test users in the Auth emulator
   * 4. Signs in as user1 (Alice) by default and captures other user IDs
   * 5. Initializes the GroupsRepository with the emulator Firestore instance
   * 6. Clears any existing groups from Firestore
   *
   * @throws IllegalStateException if the Firebase emulator is not running
   */
  @Before
  open fun setUp() = runTest {
    if (!FirebaseEmulator.isRunning) {
      error("Firebase emulator must be running! Use: firebase emulators:start")
    }

    // Clear any existing users and data
    FirebaseEmulator.auth.signOut()
    FirebaseEmulator.clearAuthEmulator()
    FirebaseEmulator.clearFirestoreEmulator()

    // Seed users in emulator
    FirebaseEmulator.createGoogleUser(user1Token)
    FirebaseEmulator.createGoogleUser(user2Token)
    FirebaseEmulator.createGoogleUser(user3Token)
    FirebaseEmulator.createGoogleUser(user4Token)

    // Sign in as user1 by default
    signInWithToken(user1Token)
    user1Id = FirebaseEmulator.auth.currentUser!!.uid

    // Store user IDs 2, 3, 4 by signing in temporarily and then restore user1
    signInWithToken(user2Token)
    user2Id = FirebaseEmulator.auth.currentUser!!.uid
    signInWithToken(user3Token)
    user3Id = FirebaseEmulator.auth.currentUser!!.uid
    signInWithToken(user4Token)
    user4Id = FirebaseEmulator.auth.currentUser!!.uid
    // Switch back to user1
    signInWithToken(user1Token)

    repository = GroupsRepositoryFirestore(FirebaseEmulator.firestore)
    // clearAllGroups() // DEBUG: MAY CONFLICT WITH FIRESTORE RULES
  }

  /**
   * Cleans up the test environment after each test.
   *
   * This method:
   * 1. Removes all groups from Firestore
   * 2. Clears all users from the Auth emulator
   * 3. Clears all data from the Firestore emulator
   *
   * Logs are included for debugging purposes to track user cleanup.
   */
  @After
  open fun tearDown() = runTest {
    // clearAllGroups() // DEBUG: MAY CONFLICT WITH FIRESTORE RULES
    FirebaseEmulator.clearAuthEmulator()
    FirebaseEmulator.clearFirestoreEmulator()
  }

  /**
   * Sign in with the given fake JWT token.
   *
   * @param token The fake JWT token created with FakeJwtGenerator
   */
  protected suspend fun signInWithToken(token: String) {
    val credential = GoogleAuthProvider.getCredential(token, null)
    FirebaseEmulator.auth.signInWithCredential(credential).await()
  }

  /** Deletes all groups in the emulator Firestore (global collection) */
  protected suspend fun clearAllGroups() {
    val groups = FirebaseEmulator.firestore.collection("groups").get().await()

    val batch = FirebaseEmulator.firestore.batch()
    groups.documents.forEach { batch.delete(it.reference) }
    batch.commit().await()

    Log.d("FirestoreGroupsGatherlyTest", "Cleared ${groups.size()} groups")
  }

  /** Returns the current count of groups in the system. */
  protected suspend fun getGroupsCount(): Int {
    val snap = FirebaseEmulator.firestore.collection("groups").get().await()
    return snap.size()
  }
}
