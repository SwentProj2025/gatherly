package com.android.gatherly.ui.todo

import androidx.test.ext.junit.runners.AndroidJUnit4
import com.android.gatherly.model.todo.ToDo
import com.android.gatherly.model.todo.ToDoStatus
import com.android.gatherly.utils.FirestoreGatherlyTest
import com.google.firebase.Timestamp
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.delay
import kotlinx.coroutines.test.runTest
import kotlinx.coroutines.withContext
import kotlinx.coroutines.withTimeout
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

private const val TIMEOUT = 100_000L
private const val DELAY = 100L

// Portions of the code in this file were generated by an LLM.

/**
 * Integration tests for [OverviewViewModel] using the real Firestore repository (via emulator).
 *
 * These tests verify that todos are correctly loaded, loading states are properly reflected, and
 * repository errors are surfaced to the UI state.
 */
@RunWith(AndroidJUnit4::class)
class OverviewViewModelFirestoreTest : FirestoreGatherlyTest() {
  private lateinit var viewModel: OverviewViewModel

  @Before
  override fun setUp() {
    super.setUp()
    viewModel = OverviewViewModel(repository)
  }

  private fun makeTodo(
      name: String,
      assignee: String = "user",
      description: String = "lorem ipsum",
      ownerId: String = "user123"
  ): ToDo {
    val now = Timestamp.now()
    return ToDo(
        uid = repository.getNewUid(),
        name = name,
        description = description,
        assigneeName = assignee,
        dueDate = now,
        dueTime = null,
        location = null,
        status = ToDoStatus.ONGOING,
        ownerId = ownerId)
  }

  @OptIn(ExperimentalCoroutinesApi::class)
  @Test
  fun getAllTodos_success_updatesUiStateWithData() = runTest {
    // Pre-populate repository
    val todo1 = makeTodo("Sample Todo 1")
    val todo2 = makeTodo("Sample Todo 2")
    repository.addTodo(todo1)
    repository.addTodo(todo2)

    // Trigger reload
    viewModel.refreshUIState()

    // Wait for repository load
    withContext(Dispatchers.Default.limitedParallelism(1)) {
      withTimeout(TIMEOUT) {
        while (viewModel.uiState.value.isLoading) {
          delay(DELAY)
        }
      }
    }

    val state = viewModel.uiState.value
    assertFalse("isLoading should be false after load", state.isLoading)
    assertNull("errorMsg should be null on success", state.errorMsg)
    assertEquals(2, state.todos.size)

    val names = state.todos.map { it.name }
    assertTrue("Sample Todo 1" in names)
    assertTrue("Sample Todo 2" in names)
  }

  @Test
  fun getAllTodos_setsLoadingStateDuringFetch() = runTest {
    viewModel.refreshUIState()

    // Wait for loading to start
    withTimeout(TIMEOUT) {
      while (!viewModel.uiState.value.isLoading) {
        delay(DELAY)
      }
    }

    // Then wait for loading to end
    withTimeout(TIMEOUT) {
      while (viewModel.uiState.value.isLoading) {
        delay(DELAY)
      }
    }

    val state = viewModel.uiState.value
    assertFalse("Expected isLoading=false after job completion", state.isLoading)
  }

  @Test
  fun getAllTodos_withEmptyRepo_returnsEmptyList() = runTest {
    // Repository has no data
    viewModel.refreshUIState()

    withTimeout(TIMEOUT) {
      while (viewModel.uiState.value.isLoading) {
        delay(DELAY)
      }
    }

    val state = viewModel.uiState.value
    assertTrue(state.todos.isEmpty())
    assertNull(state.errorMsg)
  }

  @Test
  fun refreshUiState_triggersReloadSuccessfully() = runTest {
    val todo1 = makeTodo("Initial Todo")
    repository.addTodo(todo1)
    viewModel.refreshUIState()

    withTimeout(TIMEOUT) {
      while (viewModel.uiState.value.isLoading) {
        delay(DELAY)
      }
    }

    val initialCount = viewModel.uiState.value.todos.size
    assertEquals(1, initialCount)

    // Add another todo and refresh again
    val todo2 = makeTodo("Another Todo")
    repository.addTodo(todo2)
    viewModel.refreshUIState()

    withTimeout(TIMEOUT) {
      while (viewModel.uiState.value.isLoading) {
        delay(DELAY)
      }
    }

    val updatedCount = viewModel.uiState.value.todos.size
    assertEquals(2, updatedCount)
  }
}
