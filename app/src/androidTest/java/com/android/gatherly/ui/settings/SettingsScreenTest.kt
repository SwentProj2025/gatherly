package com.android.gatherly.ui.settings

import androidx.compose.ui.test.*
import androidx.compose.ui.test.junit4.createComposeRule
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.android.gatherly.utils.FirestoreGatherlyTest
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

// This file contains code generated by an LLM (ChatGPT)

@RunWith(AndroidJUnit4::class)
class SettingsScreenTest : FirestoreGatherlyTest() {

  @get:Rule val composeRule = createComposeRule()

  @Test
  fun settingsScreen_componentsAreDisplayed() {
    // GIVEN: The Settings screen is shown
    composeRule.setContent { SettingsScreen() }

    // THEN: All main components are visible
    composeRule
        .onNodeWithTag(SettingsScreenTestTags.PROFILE_PICTURE)
        .assertExists()
        .assertIsDisplayed()
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME).assertExists().assertIsDisplayed()
    composeRule
        .onNodeWithTag(SettingsScreenTestTags.EDIT_PHOTO_BUTTON)
        .assertExists()
        .assertIsDisplayed()
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).assertExists().assertIsDisplayed()
    composeRule
        .onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD)
        .assertExists()
        .assertIsDisplayed()
    composeRule
        .onNodeWithTag(SettingsScreenTestTags.SCHOOL_FIELD)
        .assertExists()
        .assertIsDisplayed()
    composeRule
        .onNodeWithTag(SettingsScreenTestTags.SCHOOL_YEAR_FIELD)
        .assertExists()
        .assertIsDisplayed()
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertExists().assertIsDisplayed()
  }

  @Test
  fun settingsScreen_nameRequired_blocksSaveWhenEmpty() {
    // GIVEN: SettingsScreen is displayed
    composeRule.setContent { SettingsScreen() }

    // WHEN: The user clears the name field
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextClearance()

    // THEN: The save button should be disabled
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsNotEnabled()
  }

  @Test
  fun settingsScreen_validName_enablesSave() {
    composeRule.setContent { SettingsScreen() }

    // WHEN: The user enters a valid name
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Alice")

    // THEN: Save button should be enabled
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsEnabled()
  }

  @Test
  fun settingsScreen_editOtherFields_doesNotBlockSave() {
    composeRule.setContent { SettingsScreen() }

    // WHEN: The user enters valid optional fields
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Bob")
    composeRule.onNodeWithTag(SettingsScreenTestTags.SCHOOL_FIELD).performTextInput("EPFL")
    composeRule.onNodeWithTag(SettingsScreenTestTags.SCHOOL_YEAR_FIELD).performTextInput("IN BA5")

    // THEN: Save button should remain enabled
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsEnabled()
  }

  @Test
  fun settingsScreen_invalidBirthday_disablesSave() {
    composeRule.setContent { SettingsScreen() }

    // WHEN: User enters invalid date
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Charlie")
    composeRule.onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD).performTextInput("31-13-2025")

    // THEN: Save button should be disabled
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsNotEnabled()
  }

  @Test
  fun settingsScreen_validBirthday_enablesSave() {
    composeRule.setContent { SettingsScreen() }

    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Alice")
    composeRule.onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD).performTextInput("28/07/2005")

    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsEnabled()
  }

  @Test
  fun settingsScreen_clickSaveButton_triggersProfileUpdate() {
    composeRule.setContent { SettingsScreen() }

    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Diana")
    composeRule.onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD).performTextInput("10/10/2000")

    val saveButton = composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON)
    saveButton.assertIsEnabled()
    saveButton.performClick()

    saveButton.assertExists()
  }

  @Test
  fun settingsScreen_editPhotoButton_isClickable() {
    composeRule.setContent { SettingsScreen() }
    composeRule
        .onNodeWithTag(SettingsScreenTestTags.EDIT_PHOTO_BUTTON)
        .assertIsDisplayed()
        .performClick()
        .assertExists() // confirms it didnâ€™t crash
  }

  @Test
  fun settingsScreen_fieldsRetainValuesAfterInput() {
    composeRule.setContent { SettingsScreen() }

    val name = "Test User"
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput(name)
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).assertTextEquals(name)
  }
}
