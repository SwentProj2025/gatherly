package com.android.gatherly.ui.settings

import androidx.compose.ui.semantics.SemanticsProperties
import androidx.compose.ui.semantics.getOrNull
import androidx.compose.ui.test.*
import androidx.compose.ui.test.junit4.createComposeRule
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.android.gatherly.utils.FirestoreGatherlyTest
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

// This file contains code generated by an LLM (ChatGPT)

/**
 * UI tests for the [SettingsScreen] composable.
 *
 * These tests verify:
 * 1. All main components render correctly.
 * 2. Field validations work as expected.
 * 3. Save button enables/disables according to input validity.
 * 4. Error messages appear or disappear appropriately.
 * 5. UI interactions such as clicking buttons behave as expected.
 *
 * Uses test tags to reliably locate UI elements.
 */
@RunWith(AndroidJUnit4::class)
class SettingsScreenTest : FirestoreGatherlyTest() {

  @get:Rule val composeRule = createComposeRule()

  @Before
  override fun setUp() {
    super.setUp()
    composeRule.setContent { SettingsScreen() }
  }

  // Code generated by chatgpt to replace old test that failed on ci.
  @Test
  fun settingsScreen_componentsAreDisplayed() {
    /**
     * Ensures that all essential SettingsScreen components are present and visible, waiting
     * robustly for the first full frame to settle.
     */

    // Wait until *any* one known component is really visible
    composeRule.waitUntil(15_000L) {
      try {
        composeRule.onNodeWithTag(SettingsScreenTestTags.PROFILE_PICTURE).isDisplayed()
      } catch (_: Throwable) {
        false
      }
    }

    // Then verify all key UI elements exist (they may appear staggered)
    val tagsToCheck =
        listOf(
            SettingsScreenTestTags.PROFILE_PICTURE,
            SettingsScreenTestTags.USERNAME,
            SettingsScreenTestTags.EDIT_PHOTO_BUTTON,
            SettingsScreenTestTags.NAME_FIELD,
            SettingsScreenTestTags.BIRTHDAY_FIELD,
            SettingsScreenTestTags.SCHOOL_FIELD,
            SettingsScreenTestTags.SCHOOL_YEAR_FIELD,
            SettingsScreenTestTags.SAVE_BUTTON)

    for (tag in tagsToCheck) {
      composeRule.waitUntil() {
        try {
          composeRule.onNodeWithTag(tag).isDisplayed()
        } catch (_: Throwable) {
          false
        }
      }
      composeRule.onNodeWithTag(tag).assertExists().assertIsDisplayed()
    }
  }

  @Test
  fun settingsScreen_nameRequired_blocksSaveWhenEmpty() {
    /**
     * Ensures that clearing the name field disables the save button, enforcing that name input is
     * required.
     */

    // WHEN: The user clears the name field
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextClearance()
    composeRule.waitForIdle()
    // THEN: The save button should be disabled
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsNotEnabled()
  }

  @Test
  fun settingsScreen_validName_enablesSave() {
    /** Ensures that entering a valid name enables the save button. */

    // WHEN: The user enters a valid name
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Alice")
    // WHEN: The user enters a valid username
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME).performTextInput("validuser")
    composeRule.waitForIdle()
    // Given by chatgpt :
    composeRule.waitUntil(10_000L) {
      composeRule
          .onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON)
          .fetchSemanticsNode()
          .config
          .getOrNull(SemanticsProperties.Disabled) == null
    }
    // THEN: Save button should be enabled
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsEnabled()
  }

  @Test
  fun settingsScreen_editOtherFields_doesNotBlockSave() {
    /**
     * Verifies that editing optional fields (school, school year) does not disable the save button
     * when the name field is valid.
     */

    // WHEN: The user enters valid optional fields
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME).performTextInput("userna23_.test")
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Bob")
    composeRule.onNodeWithTag(SettingsScreenTestTags.SCHOOL_FIELD).performTextInput("EPFL")
    composeRule.onNodeWithTag(SettingsScreenTestTags.SCHOOL_YEAR_FIELD).performTextInput("IN BA5")

    composeRule.waitForIdle()
    // THEN: Save button should remain enabled
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsEnabled()
  }

  @Test
  fun settingsScreen_invalidBirthday_disablesSave() {
    /**
     * Ensures that entering an invalid birthday disables the save button, enforcing proper date
     * validation.
     */

    // WHEN: User enters invalid date
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Charlie")
    composeRule.onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD).performTextInput("31-13-2025")

    composeRule.waitForIdle()
    // THEN: Save button should be disabled
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsNotEnabled()
  }

  @Test
  fun settingsScreen_validBirthday_enablesSave() {
    /** Ensures that entering a valid birthday enables the save button. */
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Alice")
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME).performTextInput("test_user")
    composeRule.onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD).performTextInput("28/07/2005")
    composeRule.waitForIdle()
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsEnabled()
  }

  @Test
  fun settingsScreen_clickSaveButton_triggersProfileUpdate() {
    /**
     * Simulates clicking the save button and verifies that the profile update action is triggered.
     * Checks that the button is enabled and clickable.
     */
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Diana")
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME).performTextInput("testusername123")
    composeRule.onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD).performTextInput("10/10/2000")
    composeRule.waitForIdle()
    val saveButton = composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON)
    saveButton.assertIsEnabled()
    saveButton.performClick()

    saveButton.assertExists()
  }

  @Test
  fun settingsScreen_editPhotoButton_isClickable() {
    /**
     * Verifies that the edit photo button is displayed and can be clicked without causing a crash.
     */
    composeRule
        .onNodeWithTag(SettingsScreenTestTags.EDIT_PHOTO_BUTTON)
        .assertIsDisplayed()
        .performClick()
        .assertExists() // confirms it didnâ€™t crash
  }

  @Test
  fun settingsScreen_fieldsRetainValuesAfterInput() {
    /**
     * Checks that after entering text into the name field, the field retains the inputted value.
     */
    val name = "Test User"
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput(name)
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).assertTextEquals(name)
  }

  @Test
  fun settingsScreen_showsError_whenNameEmpty() {
    /**
     * Simulates clearing the name field and checks that the appropriate error message is displayed
     * using a test tag.
     */
    val nameField = composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD)

    // Simulate user typing then clearing
    nameField.performTextInput("X") // triggers onValueChange
    nameField.performTextClearance() // triggers invalidNameMsg to be set
    composeRule.waitForIdle()
    // Now the error text should appear
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD_ERROR).assertIsDisplayed()
  }

  @Test
  fun settingsScreen_showsError_whenBirthdayInvalid() {
    /**
     * Simulates entering an invalid birthday and verifies that the appropriate error message is
     * displayed using a test tag.
     */

    // Enter a valid name to not block save for other reasons
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Alice")

    // Enter an invalid birthday
    composeRule.onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD).performTextInput("31-31-2025")

    composeRule.waitForIdle()
    // Error message should appear below the birthday field
    composeRule.onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD_ERROR).assertIsDisplayed()
  }

  @Test
  fun settingsScreen_noError_whenFieldsValid() {
    /** Ensures that when all fields have valid values, no error messages are displayed. */
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Alice")
    composeRule.onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD).performTextInput("17/10/2025")

    composeRule.waitForIdle()
    // Error messages should not exist
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD_ERROR).assertDoesNotExist()
    composeRule.onNodeWithTag(SettingsScreenTestTags.BIRTHDAY_FIELD_ERROR).assertDoesNotExist()
  }

  @Test
  fun settingsScreen_showsError_whenUsernameInvalid() {
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME).performTextInput("!!bad!!")

    composeRule.waitForIdle()
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME_ERROR).assertIsDisplayed()
  }

  @Test
  fun settingsScreen_showsError_whenUsernameEmpty() {
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME).performTextInput("tempUsername")
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME).performTextClearance()
    composeRule.waitForIdle()
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME_ERROR).assertIsDisplayed()
  }

  @Test
  fun settingsScreen_validUsername_enablesSave() {
    composeRule.onNodeWithTag(SettingsScreenTestTags.NAME_FIELD).performTextInput("Alice")
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME).performTextInput("alice_ok")
    composeRule.waitForIdle()
    composeRule.onNodeWithTag(SettingsScreenTestTags.SAVE_BUTTON).assertIsEnabled()
  }

  @Test
  fun settingsScreen_validUsername_showsConfirmationText() {
    composeRule.onNodeWithTag(SettingsScreenTestTags.USERNAME).performTextInput("validuser")
    composeRule.waitForIdle()

    composeRule.onNodeWithText("Username is valid").assertDoesNotExist() // optional
  }
}
