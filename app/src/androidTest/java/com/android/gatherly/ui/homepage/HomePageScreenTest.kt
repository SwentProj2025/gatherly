package com.android.gatherly.ui.homepage

import androidx.compose.ui.test.assertIsDisplayed
import androidx.compose.ui.test.junit4.createComposeRule
import androidx.compose.ui.test.onNodeWithTag
import androidx.compose.ui.test.performClick
import com.android.gatherly.model.event.EventsLocalRepository
import com.android.gatherly.model.profile.Profile
import com.android.gatherly.model.profile.ProfileLocalRepository
import com.android.gatherly.model.todo.ToDo
import com.android.gatherly.model.todo.ToDoStatus
import com.android.gatherly.model.todo.ToDosRepositoryLocalMapTest
import com.android.gatherly.ui.homePage.HomePageScreen
import com.android.gatherly.ui.homePage.HomePageScreenTestTags
import com.android.gatherly.ui.homePage.HomePageViewModel
import com.android.gatherly.utils.FirebaseEmulator
import com.google.firebase.Firebase
import com.google.firebase.Timestamp
import com.google.firebase.auth.auth
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.test.runTest
import org.junit.After
import org.junit.Before
import org.junit.Rule
import org.junit.Test

// Some parts of the code in this file are generated by ChatGPT. (e.g. documentation)

/**
 * UI tests for [HomePageScreen].
 *
 * These tests ensure that key components of the Home Page are displayed and interactable, including
 * tasks, buttons, map, and friends section.
 */
class HomePageScreenTest {

  private var currentProfile: Profile =
      Profile(
          uid = "0+",
          name = "Current",
          focusSessionIds = emptyList(),
          eventIds = emptyList(),
          groupIds = emptyList(),
          friendUids = emptyList())

  @get:Rule val composeRule = createComposeRule()

  private lateinit var fakeViewModel: HomePageViewModel
  private lateinit var todosLocalRepo: ToDosRepositoryLocalMapTest
  private lateinit var eventsLocalRepo: EventsLocalRepository
  private lateinit var profileLocalRepo: ProfileLocalRepository

  @Before
  fun setUp() {
    runTest {
      FirebaseEmulator.auth.signInAnonymously().await()
      currentProfile = currentProfile.copy(uid = Firebase.auth.currentUser?.uid!!)
      todosLocalRepo = ToDosRepositoryLocalMapTest()
      eventsLocalRepo = EventsLocalRepository()
      profileLocalRepo = ProfileLocalRepository()
      populateRepositories()
      fakeViewModel =
          HomePageViewModel(
              toDosRepository = todosLocalRepo,
              eventsRepository = eventsLocalRepo,
              profileRepository = profileLocalRepo)
      composeRule.setContent { HomePageScreen(homePageViewModel = fakeViewModel) }
    }
  }

  @After
  fun tearDown() {
    FirebaseEmulator.clearAuthEmulator()
    FirebaseEmulator.clearFirestoreEmulator()
  }

  /** Populates local repositories with fake data for testing. */
  private fun populateRepositories() = runBlocking {
    todosLocalRepo.addTodo(
        ToDo(
            uid = "3",
            name = "Plan party",
            description = "Buy decorations and invite friends",
            assigneeName = "Eve",
            dueDate = Timestamp.now(),
            dueTime = null,
            location = null,
            status = ToDoStatus.ONGOING,
            ownerId = "user1"))

    profileLocalRepo.addProfile(currentProfile)
  }

  /** Verifies that all main UI components are visible and interactable. */
  @Test
  fun componentsAreDisplayed() {
    composeRule.onNodeWithTag(HomePageScreenTestTags.UPCOMING_EVENTS_TITLE).assertIsDisplayed()
    composeRule.onNodeWithTag(HomePageScreenTestTags.UPCOMING_TASKS_TITLE).assertIsDisplayed()
    composeRule.onNodeWithTag(HomePageScreenTestTags.FOCUS_TIMER_TEXT).assertIsDisplayed()
    composeRule.onNodeWithTag(HomePageScreenTestTags.FOCUS_BUTTON).assertIsDisplayed()
    composeRule.onNodeWithTag(HomePageScreenTestTags.FOCUS_BUTTON).performClick()
  }

  /** Ensures that the focus button is visible and can be clicked without crashing. */
  @Test
  fun focusButton_isClickable() {
    composeRule
        .onNodeWithTag(HomePageScreenTestTags.FOCUS_BUTTON)
        .assertIsDisplayed()
        .performClick()
  }

  /** Verifies that task items from the ViewModelâ€™s state are rendered in the UI. */
  @Test
  fun taskItemsAreDisplayed() {
    fakeViewModel.uiState.value.todos.forEach { todo ->
      composeRule
          .onNodeWithTag("${HomePageScreenTestTags.TASK_ITEM_PREFIX}${todo.uid}")
          .assertIsDisplayed()
    }
  }

  /** Confirms that task items exist in the composition tree for each todo in the state. */
  @Test
  fun taskItemsTextMatchesUiState() {
    fakeViewModel.uiState.value.todos.forEach { todo ->
      composeRule
          .onNodeWithTag("${HomePageScreenTestTags.TASK_ITEM_PREFIX}${todo.uid}")
          .assertIsDisplayed()
    }
  }

  /** Checks that each task item can be clicked without causing errors. */
  @Test
  fun taskItem_isClickable() {
    fakeViewModel.uiState.value.todos.forEach { todo ->
      composeRule
          .onNodeWithTag("${HomePageScreenTestTags.TASK_ITEM_PREFIX}${todo.uid}")
          .assertIsDisplayed()
          .performClick()
    }
  }

  /** Ensures the friends section is visible on the screen. */
  @Test
  fun friendsSection_isDisplayed_withAvatars() {
    composeRule.onNodeWithTag(HomePageScreenTestTags.FRIENDS_SECTION).assertIsDisplayed()
  }

  /** Verifies that the mini map is rendered and responds to click interactions. */
  @Test
  fun miniMap_isDisplayed_andClickable() {
    composeRule
        .onNodeWithTag(HomePageScreenTestTags.MINI_MAP_CARD)
        .assertIsDisplayed()
        .performClick()
  }
}
