package com.android.gatherly.ui.map

// This file contains code generated by an LLM (Claude.ai).

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.android.gatherly.model.todo.BootcampToDo
import com.android.gatherly.model.todo.BootcampToDosRepository
import com.android.gatherly.model.todo.isDrawable
import com.google.android.gms.maps.model.LatLng
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

/** EPFL Latitude and Longitude values. */
val EPFL_LATLNG = LatLng(46.5197, 6.5663)

/**
 * UI state for the Map's ViewModel.
 *
 * @param todoList list of todos for the signed-in user /* @param eventList list of events */
 *   /* @param expandedTodoId todoId of the latest marker that was clicked and expanded by user */
 *   /* @param latestConsultedTodoId todoId of the latest marker that provoked a screen
 *   navigation/transition */ /* @param cameraPos current position of the camera (determined in part
 *   by latestConsulterMarker) */
 */
data class UIState(
    val todoList: List<BootcampToDo> = emptyList(),
    /* TODO : eventList: List<CampusEvent> = emptyList() */
    val expandedTodoId: String? = null,
    val lastConsultedTodoId: String? = null,
    val cameraPos: LatLng = EPFL_LATLNG // TODO: Replace placeholder with current user location!
)

/**
 * Function that retrieves "drawable" todos, i.e. those which are not complete, and have a valid
 * location.
 *
 * @param todos input list of todos to filter from
 * @return list of drawable todos
 */
private fun getDrawableTodos(todos: List<BootcampToDo>): List<BootcampToDo> {
  return todos.filter { it.isDrawable() }
}

class MapViewModel(private val placeholderTodoRepository: BootcampToDosRepository) : ViewModel() {
  private val _uiState: MutableStateFlow<UIState> = MutableStateFlow(UIState())
  val uiState: StateFlow<UIState> = _uiState.asStateFlow()

  init {
    viewModelScope.launch {
      val todos = placeholderTodoRepository.getAllTodos()
      _uiState.value = _uiState.value.copy(todoList = getDrawableTodos(todos))
    }
  }

  /**
   * Function that updates the expandedTodoId value to match the clicked/pressed Marker.
   *
   * @param todoId the ID of the todo list item represented by the Marker
   */
  fun onTodoMarkerTapped(todoId: String) {
    _uiState.value = _uiState.value.copy(expandedTodoId = todoId)
  }

  /**
   * Function that updates the expandedTodoId value to make it null upon minimising/dismissing a
   * marker.
   */
  fun onTodoMarkerDismissed() {
    _uiState.value = _uiState.value.copy(expandedTodoId = null)
  }

  /** Function that updates the lastConsultedTodoId when causing navigation to the todo screen. */
  fun onTodoConsulted(todoId: String) {
    _uiState.value =
        _uiState.value.copy(
            lastConsultedTodoId = todoId,
            // TODO : update camera position accordingly
        )
  }
}
