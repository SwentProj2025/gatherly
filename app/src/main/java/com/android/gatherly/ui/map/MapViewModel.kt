package com.android.gatherly.ui.map

// This file contains code generated by an LLM (Claude.ai).

import androidx.credentials.ClearCredentialStateRequest
import androidx.credentials.CredentialManager
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.android.gatherly.model.todo.ToDo
import com.android.gatherly.model.todo.ToDoStatus
import com.android.gatherly.model.todo.ToDosRepository
import com.android.gatherly.model.todo.ToDosRepositoryLocalMapTest
import com.google.android.gms.maps.model.LatLng
import com.google.firebase.Firebase
import com.google.firebase.auth.auth
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

/** Default location coordinates for EPFL campus. */
val EPFL_LATLNG = LatLng(46.5197, 6.5663)

/**
 * UI state for the Map screen.
 *
 * @property todoList List of drawable todos (incomplete todos with valid locations).
 * @property expandedTodoId ID of the todo whose marker is currently expanded, or null if none.
 * @property lastConsultedTodoId ID of the most recently consulted todo.
 * @property cameraPos Current camera position on the map.
 * @property errorMsg Error message to display, or null if no error.
 * @property onSignedOut Flag indicating whether the user has signed out.
 */
data class UIState(
    val todoList: List<ToDo> = emptyList(),
    val expandedTodoId: String? = null,
    val lastConsultedTodoId: String? = null,
    val cameraPos: LatLng = EPFL_LATLNG,
    val errorMsg: String? = null,
    val onSignedOut: Boolean = false
)

/**
 * Filters todos to return only those that should be displayed on the map.
 *
 * A todo is drawable if it is not complete and has a valid location.
 *
 * @param todos The list of todos to filter.
 * @return List of todos that can be drawn on the map.
 */
private fun getDrawableTodos(todos: List<ToDo>): List<ToDo> {
  return todos.filter { it.status != ToDoStatus.ENDED && it.location != null }
}

/**
 * ViewModel for the Map screen.
 *
 * Manages the UI state for displaying todos on a map, including marker expansion and user sign-out
 * functionality.
 *
 * @property repository Repository for accessing todo data.
 */
class MapViewModel(private val repository: ToDosRepository = ToDosRepositoryLocalMapTest()) :
    ViewModel() {

  /** StateFlow that emits the current UI state for the Map screen. */
  private val _uiState: MutableStateFlow<UIState> = MutableStateFlow(UIState())
  val uiState: StateFlow<UIState> = _uiState.asStateFlow()

  /**
   * Initializes the ViewModel by loading all todos from the repository and filtering them to
   * display only drawable todos.
   */
  init {
    viewModelScope.launch {
      val todos = repository.getAllTodos()
      _uiState.value = _uiState.value.copy(todoList = getDrawableTodos(todos))
    }
  }

  /**
   * Handles a tap on a todo marker by expanding it.
   *
   * @param todoId The ID of the todo whose marker was tapped.
   */
  fun onTodoMarkerTapped(todoId: String) {
    _uiState.value = _uiState.value.copy(expandedTodoId = todoId)
  }

  /** Handles dismissal of an expanded marker by collapsing it. */
  fun onTodoMarkerDismissed() {
    _uiState.value = _uiState.value.copy(expandedTodoId = null)
  }

  /**
   * Signs out the current user and clears credential state.
   *
   * @param credentialManager The credential manager to clear stored credentials.
   */
  fun signOut(credentialManager: CredentialManager) {
    viewModelScope.launch {
      _uiState.value = _uiState.value.copy(onSignedOut = true)
      Firebase.auth.signOut()
      credentialManager.clearCredentialState(ClearCredentialStateRequest())
    }
  }
}
