package com.android.gatherly.ui.groups

import androidx.credentials.ClearCredentialStateRequest
import androidx.credentials.CredentialManager
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.android.gatherly.model.group.Group
import com.android.gatherly.model.group.GroupsRepository
import com.android.gatherly.model.group.GroupsRepositoryFirestore
import com.google.firebase.Firebase
import com.google.firebase.auth.auth
import com.google.firebase.firestore.firestore
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

// Portions of the code in this file are copy-pasted from the Bootcamp solution provided by the
// SwEnt staff.

// This file contains code generated by an LLM (Claude.ai).

/**
 * Represents the UI state for the Groups Overview screen.
 *
 * @property groups A list of `Group` items to be displayed in the Overview screen. Defaults to an
 *   empty list if no items are available.
 */
data class GroupsOverviewUIState(
    val groups: List<Group> = emptyList(),
    val errorMsg: String? = null,
    val isLoading: Boolean = false,
    val signedOut: Boolean = false
)

/**
 * ViewModel for the Groups Overview screen.
 *
 * Responsible for managing the UI state, by fetching and providing Group items via the
 * [GroupsRepository].
 *
 * @property groupsRepository The repository used to fetch and manage Group items.
 */
class GroupsOverviewViewModel(
    private val groupsRepository: GroupsRepository = GroupsRepositoryFirestore(Firebase.firestore),
) : ViewModel() {

  private val _uiState = MutableStateFlow(GroupsOverviewUIState())
  val uiState: StateFlow<GroupsOverviewUIState> = _uiState.asStateFlow()

  init {
    getUserGroups()
  }

  /** Refreshes the UI state by fetching all Group items from the repository. */
  fun refreshUIState() {
    getUserGroups()
  }

  /** Fetches user's groups from the repository and updates the UI state. */
  private fun getUserGroups() {
    viewModelScope.launch {
      _uiState.value = _uiState.value.copy(isLoading = true, errorMsg = null)
      try {
        val groups = groupsRepository.getUserGroups()
        _uiState.value = GroupsOverviewUIState(groups = groups, isLoading = false)
      } catch (e: Exception) {
        _uiState.value =
            _uiState.value.copy(groups = emptyList(), errorMsg = e.message, isLoading = false)
      }
    }
  }

  /** Initiates sign-out */
  fun onSignedOut(credentialManager: CredentialManager): Unit {
    viewModelScope.launch {
      _uiState.value = _uiState.value.copy(signedOut = true)
      Firebase.auth.signOut()
      credentialManager.clearCredentialState(ClearCredentialStateRequest())
    }
  }
}
