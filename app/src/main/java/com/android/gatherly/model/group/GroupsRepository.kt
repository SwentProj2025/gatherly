package com.android.gatherly.model.group

// This file contains code generated by an LLM (GitHub Copilot, Claude.ai).

/**
 * Repository interface for managing groups.
 *
 * Groups are collections of users that can organize events together. Each group has a creator who
 * has admin privileges by default, and can add/remove members and other admins.
 */
interface GroupsRepository {

  /**
   * Returns a new unique ID for a group.
   *
   * @return A unique identifier that can be used when creating a new [Group].
   */
  fun getNewId(): String

  /**
   * Returns a list of all groups in the system.
   *
   * Note: This returns all groups regardless of user membership. Use [getUserGroups] to get only
   * the groups the current user belongs to.
   *
   * @return A list of all [Group]s.
   */
  suspend fun getAllGroups(): List<Group>

  /**
   * Returns a list of groups that the current user is a member of.
   *
   * @return A list of [Group]s where the current user's ID is in the [Group.memberIds] list.
   */
  suspend fun getUserGroups(): List<Group>

  /**
   * Returns the [Group] with the given ID.
   *
   * @param groupId The unique identifier of the group.
   * @return The group with the specified ID.
   * @throws NoSuchElementException if no group with the given ID exists.
   */
  suspend fun getGroup(groupId: String): Group

  /**
   * Adds a new [Group] to the repository.
   *
   * The current user is automatically set as the creator and added to both the member and admin
   * lists.
   *
   * @param group The group to add.
   */
  suspend fun addGroup(group: Group)

  /**
   * Edits the [Group] with the given ID to have new values.
   *
   * Only group admins are allowed to edit the group. The creator ID is preserved from the existing
   * group.
   *
   * @param groupId The unique identifier of the group to edit.
   * @param newValue The updated group data.
   * @throws SecurityException if the current user is not an admin of the group.
   */
  suspend fun editGroup(groupId: String, newValue: Group)

  /**
   * Deletes the [Group] with the given ID.
   *
   * Only group admins are allowed to delete the group.
   *
   * @param groupId The unique identifier of the group to delete.
   * @throws SecurityException if the current user is not an admin of the group.
   */
  suspend fun deleteGroup(groupId: String)

  /**
   * Adds a user to the group's member list.
   *
   * @param groupId The unique identifier of the group.
   * @param userId The user ID to add as a member.
   */
  suspend fun addMember(groupId: String, userId: String)

  /**
   * Removes a user from the group's member list.
   *
   * If the user is also an admin, they are removed from the admin list as well. Cannot remove the
   * last admin from a group.
   *
   * @param groupId The unique identifier of the group.
   * @param userId The user ID to remove from members.
   * @throws IllegalStateException if attempting to remove the last admin.
   */
  suspend fun removeMember(groupId: String, userId: String)

  /**
   * Adds a user to the group's admin list.
   *
   * The user must already be a member of the group.
   *
   * @param groupId The unique identifier of the group.
   * @param userId The user ID to grant admin privileges.
   * @throws IllegalStateException if the user is not a member of the group.
   */
  suspend fun addAdmin(groupId: String, userId: String)

  /**
   * Removes a user from the group's admin list.
   *
   * Cannot remove the last admin from a group.
   *
   * @param groupId The unique identifier of the group.
   * @param userId The user ID to revoke admin privileges from.
   * @throws IllegalStateException if attempting to remove the last admin.
   */
  suspend fun removeAdmin(groupId: String, userId: String)
}
