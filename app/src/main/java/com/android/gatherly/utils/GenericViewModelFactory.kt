package com.android.gatherly.utils

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider

// This class contains code generated by an LLM (Claude.ai).

/**
 * A generic factory for creating ViewModel instances with dependencies.
 *
 * This factory simplifies ViewModel instantiation when dependencies need to be injected. The
 * Android `viewModel()` function requires a factory to create ViewModels that have non-empty
 * constructors. This class provides a reusable, type-safe factory implementation.
 *
 * @param VM the type of ViewModel to be created (must extend ViewModel)
 * @param creator a lambda function that creates and returns an instance of the ViewModel. The
 *   lambda captures any required dependencies from the surrounding scope.
 *
 * ## Example usage:
 * ```kotlin
 * @Composable
 * fun MyScreen(
 *     userAuthManager: UserAuthManager,
 *     viewModel: SignInViewModel = viewModel(
 *         factory = GenericViewModelFactory {
 *             SignInViewModel(userAuthManager)
 *         }
 *     )
 * ) {
 *     // Screen content
 * }
 * ```
 */
class GenericViewModelFactory<VM : ViewModel>(private val creator: () -> VM) :
    ViewModelProvider.Factory {
  override fun <T : ViewModel> create(modelClass: Class<T>): T {
    @Suppress("UNCHECKED_CAST") return creator() as T
  }
}
