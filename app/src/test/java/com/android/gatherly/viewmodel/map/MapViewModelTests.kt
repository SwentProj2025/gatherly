package com.android.gatherly.viewmodel.map

import com.android.gatherly.model.todo.ToDo
import com.android.gatherly.model.todo.ToDoStatus
import com.android.gatherly.ui.map.MapViewModel
import com.android.gatherly.viewmodel.FakeToDosRepositoryLocal
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.StandardTestDispatcher
import kotlinx.coroutines.test.advanceUntilIdle
import kotlinx.coroutines.test.resetMain
import kotlinx.coroutines.test.runTest
import kotlinx.coroutines.test.setMain
import org.junit.After
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test

// This file contains code generated by an LLM (Claude.ai).

class MapViewModelTests {

  private val testDispatcher = StandardTestDispatcher()

  @OptIn(ExperimentalCoroutinesApi::class)
  @Before
  fun setup() {
    Dispatchers.setMain(testDispatcher)
  }

  @OptIn(ExperimentalCoroutinesApi::class)
  @After
  fun tearDown() {
    Dispatchers.resetMain()
  }

  val testObjects = MapViewModelTestsTodos.testedTodos

  fun isDrawable(todo: ToDo): Boolean {
    return todo.status != ToDoStatus.ENDED && todo.location != null
  }

  @Test
  fun isDrawableWorksOn_IncompleteTodoWithLocation() = runTest {
    // Should be drawable as todos are incomplete and have location
    val expectedResult1 = true
    val actualResult1 = isDrawable(MapViewModelTestsTodos.incompleteTodoWithLocation1)
    assertEquals(expectedResult1, actualResult1)

    val expectedResult2 = true
    val actualResult2 = isDrawable(MapViewModelTestsTodos.incompleteTodoWithLocation2)
    assertEquals(expectedResult2, actualResult2)
  }

  @Test
  fun isDrawableWorksOn_CompleteTodoWithLocation() = runTest {
    // Should not be drawable as todo is complete
    val expectedResult = false
    val actualResult = isDrawable(MapViewModelTestsTodos.completeTodoWithLocation)
    assertEquals(expectedResult, actualResult)
  }

  @Test
  fun isDrawableWorksOn_IncompleteTodoWithoutLocation() = runTest {
    // Should not be drawable as todo has no location
    val expectedResult = false
    val actualResult = isDrawable(MapViewModelTestsTodos.incompleteTodoWithoutLocation)
    assertEquals(expectedResult, actualResult)
  }

  @Test
  fun isDrawableWorksOn_CompleteTodoWithoutLocation() = runTest {
    // Should not be drawable as todo is complete (lazy evaluation)
    val expectedResult = false
    val actualResult = isDrawable(MapViewModelTestsTodos.completeTodoWithoutLocation)
    assertEquals(expectedResult, actualResult)
  }

  @OptIn(ExperimentalCoroutinesApi::class)
  @Test
  fun getDrawableTodosRetrievesCorrectList() = runTest {
    val repo = FakeToDosRepositoryLocal()
    for (todo in testObjects) {
      repo.addTodo(todo)
    }

    val vm = MapViewModel(repo)
    advanceUntilIdle()

    val expectedList: List<ToDo> =
        listOf(
            MapViewModelTestsTodos.incompleteTodoWithLocation1,
            MapViewModelTestsTodos.incompleteTodoWithLocation2)

    val actualList: List<ToDo> = vm.uiState.value.todoList
    assertEquals(expectedList, actualList)
  }

  @Test
  fun onTodoMarkerTapped_UpdatesExpandedTodoId() = runTest {
    val repo = FakeToDosRepositoryLocal()
    val vm = MapViewModel(repo)

    assertNull(vm.uiState.value.expandedTodoId)

    vm.onTodoMarkerTapped("todo1")

    assertEquals("todo1", vm.uiState.value.expandedTodoId)
  }

  @Test
  fun onTodoMarkerDismissed_ClearsExpandedTodoId() = runTest {
    val repo = FakeToDosRepositoryLocal()
    val vm = MapViewModel(repo)

    vm.onTodoMarkerTapped("todo1")
    assertEquals("todo1", vm.uiState.value.expandedTodoId)

    vm.onTodoMarkerDismissed()

    assertNull(vm.uiState.value.expandedTodoId)
  }
}
