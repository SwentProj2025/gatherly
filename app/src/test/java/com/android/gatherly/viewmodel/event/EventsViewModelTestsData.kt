package com.android.gatherly.viewmodel.event

import com.android.gatherly.model.event.Event
import com.android.gatherly.model.event.EventStatus
import com.android.gatherly.model.map.Location
import com.google.firebase.Timestamp

// This file contains code generated by an LLM.

/**
 * Test data fixture for EventsViewModel tests.
 *
 * Provides a set of events with different user relationships:
 * - [eventCreatedByTestUser]: Created by and participated in by TEST_USER_ID
 * - [eventWithTestUserParticipating]: Created by OTHER_USER_ID, TEST_USER_ID is a participant
 * - [globalEvent]: Created by OTHER_USER_ID, TEST_USER_ID has no relationship
 * - [pastEvent]: Created by OTHER_USER_ID with PAST status
 *
 * These events cover the main categorization scenarios in the EventsViewModel: created events,
 * participated events, and global events.
 */
object EventsViewModelTestsData {

  const val TEST_USER_ID = "testUser123"
  const val OTHER_USER_ID = "otherUser456"

  val testLocation1 = Location(latitude = 46.5190, longitude = 6.5668, name = "BC Building")

  val testLocation2 =
      Location(latitude = 46.5186, longitude = 6.5661, name = "Rolex Learning Center")

  val eventCreatedByTestUser =
      Event(
          id = "event1",
          title = "Study Session",
          description = "CS-311 group study",
          creatorName = "Alex",
          creatorId = TEST_USER_ID,
          participants = listOf(TEST_USER_ID),
          location = testLocation1,
          date = Timestamp(1730000000, 0),
          startTime = Timestamp(1730010000, 0),
          endTime = Timestamp(1730020000, 0),
          status = EventStatus.UPCOMING)

  val eventWithTestUserParticipating =
      Event(
          id = "event2",
          title = "Project Meeting",
          description = "Discuss Android app",
          creatorName = "Other User",
          creatorId = OTHER_USER_ID,
          participants = listOf(OTHER_USER_ID, TEST_USER_ID),
          location = testLocation2,
          date = Timestamp(1731000000, 0),
          startTime = Timestamp(1731010000, 0),
          endTime = Timestamp(1731020000, 0),
          status = EventStatus.UPCOMING)

  val globalEvent =
      Event(
          id = "event3",
          title = "Networking Event",
          description = "Meet other students",
          creatorName = "Other User",
          creatorId = OTHER_USER_ID,
          participants = listOf(OTHER_USER_ID),
          location = testLocation1,
          date = Timestamp(1732000000, 0),
          startTime = Timestamp(1732010000, 0),
          endTime = Timestamp(1732020000, 0),
          status = EventStatus.UPCOMING)

  val pastEvent =
      Event(
          id = "event4",
          title = "Past Event",
          description = "Already happened",
          creatorName = "Other User",
          creatorId = OTHER_USER_ID,
          participants = listOf(OTHER_USER_ID),
          location = testLocation2,
          date = Timestamp(1720000000, 0),
          startTime = Timestamp(1720010000, 0),
          endTime = Timestamp(1720020000, 0),
          status = EventStatus.PAST)

  val allTestEvents =
      listOf(eventCreatedByTestUser, eventWithTestUserParticipating, globalEvent, pastEvent)
}
