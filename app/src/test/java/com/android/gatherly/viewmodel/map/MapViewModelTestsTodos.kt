package com.android.gatherly.viewmodel.map

import com.android.gatherly.model.map.Location
import com.android.gatherly.model.todo.ToDo
import com.android.gatherly.model.todo.ToDoStatus
import com.google.firebase.Timestamp

// This file contains code generated by an LLM (Claude.ai).

/**
 * Test data fixtures for [MapViewModelTests].
 *
 * Provides a comprehensive set of todo objects with different combinations of completion status and
 * location presence to test the map filtering logic.
 */
object MapViewModelTestsTodos {
  /** Test location at BC Building on EPFL campus. */
  val testLocation1 = Location(latitude = 46.5190, longitude = 6.5668, name = "BC Building")

  /** Test location at Rolex Learning Center on EPFL campus. */
  val testLocation2 =
      Location(latitude = 46.5186, longitude = 6.5661, name = "Rolex Learning Center")

  /** Incomplete todo with a valid location. This todo should be drawable on the map. */
  val incompleteTodoWithLocation1 =
      ToDo(
          uid = "todo1",
          name = "Study for exam",
          description = "Prepare for CS-311 midterm",
          assigneeName = "Alex",
          dueDate = Timestamp(1730000000, 0),
          dueTime = null,
          location = testLocation1,
          status = ToDoStatus.ONGOING,
          ownerId = "user123")

  /** Another incomplete todo with a valid location. This todo should be drawable on the map. */
  val incompleteTodoWithLocation2 =
      ToDo(
          uid = "todo5",
          name = "Master unit testing",
          description = "Prepare tests for Map ViewModel",
          assigneeName = "Alex",
          dueDate = Timestamp(1730000000, 0),
          dueTime = null,
          location = testLocation1,
          status = ToDoStatus.ONGOING,
          ownerId = "user123")

  /**
   * Complete todo with a valid location. This todo should NOT be drawable on the map (completed
   * tasks are filtered out).
   */
  val completeTodoWithLocation =
      ToDo(
          uid = "todo2",
          name = "Submit assignment",
          description = "Upload to Moodle",
          assigneeName = "Alex",
          dueDate = Timestamp(1729000000, 0),
          dueTime = null,
          location = testLocation2,
          status = ToDoStatus.ENDED,
          ownerId = "user123")

  /**
   * Incomplete todo without a location. This todo should NOT be drawable on the map (no location to
   * display).
   */
  val incompleteTodoWithoutLocation =
      ToDo(
          uid = "todo3",
          name = "Read textbook",
          description = "Chapter 5",
          assigneeName = "Alex",
          dueDate = Timestamp(1731000000, 0),
          dueTime = null,
          location = null,
          status = ToDoStatus.ONGOING,
          ownerId = "user123")

  /**
   * Complete todo without a location. This todo should NOT be drawable on the map (completed and no
   * location).
   */
  val completeTodoWithoutLocation =
      ToDo(
          uid = "todo4",
          name = "Watch lecture",
          description = "Week 3 videos",
          assigneeName = "Alex",
          dueDate = Timestamp(1728000000, 0),
          dueTime = null,
          location = null,
          status = ToDoStatus.ENDED,
          ownerId = "user123")

  /**
   * Comprehensive list of all test todos covering all combinations of status and location. Used to
   * verify that the map filtering logic correctly identifies only the drawable todos.
   */
  val testedTodos: List<ToDo> =
      listOf(
          incompleteTodoWithLocation1,
          incompleteTodoWithLocation2,
          completeTodoWithLocation,
          incompleteTodoWithoutLocation,
          completeTodoWithoutLocation)
}
