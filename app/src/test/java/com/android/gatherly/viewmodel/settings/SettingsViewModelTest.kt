package com.android.gatherly.viewmodel.settings

import com.android.gatherly.model.profile.Profile
import com.android.gatherly.ui.settings.SettingsViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.StandardTestDispatcher
import kotlinx.coroutines.test.advanceUntilIdle
import kotlinx.coroutines.test.resetMain
import kotlinx.coroutines.test.runTest
import kotlinx.coroutines.test.setMain
import org.junit.After
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test

// Part of this code was generated by an LLM

/** Unit tests for [SettingsViewModel]. */
@OptIn(ExperimentalCoroutinesApi::class)
class SettingsViewModelTest {

  private val testDispatcher = StandardTestDispatcher()
  private lateinit var repo: ProfileRepositoryLocalForTests
  private lateinit var viewModel: SettingsViewModel

  @Before
  fun setup() {
    Dispatchers.setMain(testDispatcher)
    repo = ProfileRepositoryLocalForTests()
    viewModel = SettingsViewModel(repo)
  }

  @After
  fun tearDown() {
    Dispatchers.resetMain()
  }

  // ------------------------------------------------------------------------
  // PROFILE LOADING
  // ------------------------------------------------------------------------

  @Test
  fun loadProfile_LoadsExistingProfileIntoUiState() = runTest {
    val profile =
        Profile(
            uid = "u1", name = "Alice", username = "alice_ok", school = "Harvard", schoolYear = "3")
    repo.addProfile(profile)

    viewModel.loadProfile("u1")
    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertEquals("Alice", state.name)
    assertEquals("alice_ok", state.username)
    assertEquals("Harvard", state.school)
    assertEquals("3", state.schoolYear)
    assertNull(state.errorMsg)
  }

  @Test
  fun loadProfile_WhenMissing_CreatesDefaultProfile() = runTest {
    viewModel.loadProfile("new_user")
    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertEquals("", state.name)
    assertEquals("", state.username)
    assertFalse(state.isValid)
    assertNull(state.errorMsg)
  }

  // ------------------------------------------------------------------------
  // FIELD VALIDATION
  // ------------------------------------------------------------------------

  @Test
  fun editName_WithBlankName_SetsInvalidMessage() = runTest {
    viewModel.editName("")
    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertEquals("Name cannot be empty", state.invalidNameMsg)
    assertFalse(state.isValid)
  }

  @Test
  fun editBirthday_WithInvalidDate_SetsErrorMessage() = runTest {
    viewModel.editBirthday("99/99/9999")
    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertEquals("Date is not valid (format: dd/mm/yyyy)", state.invalidBirthdayMsg)
    assertFalse(state.isValid)
  }

  @Test
  fun editBirthday_WithValidDate_ClearsErrorMessage() = runTest {
    viewModel.editName("Alice")
    viewModel.editUsername("alice_ok")
    viewModel.editBirthday("10/12/2024")
    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertNull(state.invalidBirthdayMsg)
    assertTrue(state.isValid)
  }

  @Test
  fun editPhoto_updatesProfilePictureUrl() {
    val newUrl = "https://example.com/pic.jpg"
    viewModel.editPhoto(newUrl)
    assertEquals(newUrl, viewModel.uiState.value.profilePictureUrl)
  }

  // ------------------------------------------------------------------------
  // USERNAME VALIDATION & AVAILABILITY
  // ------------------------------------------------------------------------

  @Test
  fun editUsername_WithInvalidFormat_SetsErrorMessage() = runTest {
    viewModel.editUsername("Bad!!Name")
    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertEquals(
        "Invalid username format (3â€“20 chars, lowercase, ., -, _ allowed)",
        state.invalidUsernameMsg)
    assertNull(state.isUsernameAvailable)
    assertFalse(state.isValid)
  }

  @Test
  fun editUsername_WithValidName_ChecksAvailability() = runTest {
    viewModel.editUsername("valid_name")
    advanceUntilIdle()

    val state = viewModel.uiState.value
    assertNull(state.invalidUsernameMsg)
    assertNotNull(state.isUsernameAvailable)
  }

  // ------------------------------------------------------------------------
  // PROFILE UPDATES
  // ------------------------------------------------------------------------

  @Test
  fun updateProfile_WithValidData_UpdatesRepositoryAndClearsError() = runTest {
    val profile = Profile(uid = "u1", name = "Alice", username = "old_name")
    repo.addProfile(profile)

    viewModel.loadProfile("u1")
    advanceUntilIdle()

    viewModel.editName("Bob")
    viewModel.editUsername("new_user")
    advanceUntilIdle()

    viewModel.updateProfile("u1", isFirstTime = true)
    advanceUntilIdle()

    val updated = repo.getProfileByUid("u1")
    assertEquals("Bob", updated?.name)
    assertEquals("new_user", updated?.username)
    assertNull(viewModel.uiState.value.errorMsg)
  }

  @Test
  fun updateProfile_WhenInvalidName_SetsErrorMsgAndDoesNotUpdate() = runTest {
    val profile = Profile(uid = "u1", name = "Alice", username = "ok")
    repo.addProfile(profile)

    viewModel.loadProfile("u1")
    advanceUntilIdle()

    viewModel.editName("") // invalid
    viewModel.editUsername("ok")

    viewModel.updateProfile("u1", isFirstTime = true)
    advanceUntilIdle()

    val updated = repo.getProfileByUid("u1")
    assertEquals("Alice", updated?.name)
    assertEquals("ok", updated?.username)
    assertEquals("At least one field is not valid.", viewModel.uiState.value.errorMsg)
  }

  @Test
  fun updateProfile_WhenUsernameAlreadyTaken_SetsErrorMsg() = runTest {
    // simulate repo already containing username
    val existing = Profile(uid = "u2", name = "Bob", username = "taken_name")
    repo.addProfile(existing)

    val newProfile = Profile(uid = "u1", name = "Alice", username = "old_name")
    repo.addProfile(newProfile)

    viewModel.loadProfile("u1")
    advanceUntilIdle()

    viewModel.editName("Alice Updated")
    viewModel.editUsername("taken_name")
    advanceUntilIdle()

    viewModel.updateProfile("u1", isFirstTime = true)
    advanceUntilIdle()

    assertEquals("At least one field is not valid.", viewModel.uiState.value.errorMsg)
  }
}
