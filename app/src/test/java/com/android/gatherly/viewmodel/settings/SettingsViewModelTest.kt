package com.android.gatherly.viewmodel.settings

import com.android.gatherly.model.profile.Profile
import com.android.gatherly.ui.settings.SettingsViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.StandardTestDispatcher
import kotlinx.coroutines.test.advanceUntilIdle
import kotlinx.coroutines.test.resetMain
import kotlinx.coroutines.test.runTest
import kotlinx.coroutines.test.setMain
import org.junit.After
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test

// This file contains code generated by an LLM (ChatGPT)

@OptIn(ExperimentalCoroutinesApi::class)
class SettingsViewModelTest {

  private val testDispatcher = StandardTestDispatcher()
  private lateinit var repo: ProfileRepositoryLocalForTests
  private lateinit var viewModel: SettingsViewModel

  @Before
  fun setup() {
    Dispatchers.setMain(testDispatcher)
    repo = ProfileRepositoryLocalForTests()
    viewModel = SettingsViewModel(repo)
  }

  @After
  fun tearDown() {
    Dispatchers.resetMain()
  }

  @Test
  fun loadProfile_LoadsExistingProfileIntoUiState() = runTest {
    // Arrange
    val profile = Profile(uid = "u1", name = "Alice", school = "Harvard", schoolYear = "3")
    repo.addProfile(profile)

    // Act
    viewModel.loadProfile("u1")
    advanceUntilIdle()

    // Assert
    val state = viewModel.uiState.value
    assertEquals("Alice", state.name)
    assertEquals("Harvard", state.school)
    assertEquals("3", state.schoolYear)
    assertTrue(state.isValid)
    assertNull(state.errorMsg)
  }

  @Test
  fun loadProfile_WhenMissing_CreatesDefaultProfile() = runTest {
    // Act
    viewModel.loadProfile("new_user")
    advanceUntilIdle()

    // Assert
    val state = viewModel.uiState.value
    assertEquals("new_user", state.name)
    assertTrue(state.isValid)
    assertNull(state.errorMsg)
  }

  @Test
  fun editName_WithBlankName_SetsInvalidMessage() = runTest {
    // Act
    viewModel.editName("")
    advanceUntilIdle()

    // Assert
    val state = viewModel.uiState.value
    assertEquals("Name cannot be empty", state.invalidNameMsg)
    assertFalse(state.isValid)
  }

  @Test
  fun editBirthday_WithInvalidDate_SetsErrorMessage() = runTest {
    // Act
    viewModel.editBirthday("99/99/9999")
    advanceUntilIdle()

    // Assert
    val state = viewModel.uiState.value
    assertEquals("Date is not valid (format: dd/mm/yyyy)", state.invalidBirthdayMsg)
    assertFalse(state.isValid)
  }

  @Test
  fun editBirthday_WithValidDate_ClearsErrorMessage() = runTest {
    // Act
    viewModel.editName("Alice")
    viewModel.editBirthday("10/12/2024")
    advanceUntilIdle()

    // Assert
    val state = viewModel.uiState.value
    assertNull(state.invalidBirthdayMsg)
    assertTrue(state.isValid)
  }

  @Test
  fun updateProfile_WithValidData_ReturnsTrueAndUpdatesRepo() = runTest {
    // Arrange
    val profile = Profile(uid = "u1", name = "Alice")
    repo.addProfile(profile)
    viewModel.loadProfile("u1")
    advanceUntilIdle()

    viewModel.editName("Bob")

    // Act
    val result = viewModel.updateProfile("u1")
    advanceUntilIdle()

    // Assert
    assertTrue(result)
    val updated = repo.getProfileByUid("u1")
    assertEquals("Bob", updated?.name)
    assertNull(viewModel.uiState.value.errorMsg)
  }

  @Test
  fun updateProfile_WhenInvalid_ReturnsFalseAndSetsErrorMsg() = runTest {
    // Arrange
    viewModel.editName("") // Invalid name

    // Act
    val result = viewModel.updateProfile("some_id")
    advanceUntilIdle()

    // Assert
    assertFalse(result)
    assertEquals("At least one field is not valid", viewModel.uiState.value.errorMsg)
  }

  @Test
  fun editPhoto_updatesProfilePictureUrl() {
    val newUrl = "https://example.com/pic.jpg"
    viewModel.editPhoto(newUrl)
    assertEquals(newUrl, viewModel.uiState.value.profilePictureUrl)
  }
}
